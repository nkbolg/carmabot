import collections
import logging

import aiogram.utils.exceptions
from aiogram import types
from aiogram.types import ChatType


class Handlers:
    def __init__(self, bot: aiogram.Bot):
        self.bot = bot
        self.patterns = ['—Å–ø–∞—Å–∏–±', '—Å–ø—Å', 'thanks']
        self.carma = collections.defaultdict(int)

    @staticmethod
    async def start_handler(message: types.Message):
        await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø —Å—á–∏—Ç–∞—é –∫–∞—Ä–º—É –≤ —á–∞—Ç–∞—Ö.", reply=False)

    async def any_handler(self, message: types.Message):
        if message.chat.type != ChatType.GROUP:
            logging.info("Skipping non group message")
            return
        is_thankful_msg = message.text == '+'
        if is_thankful_msg is False:
            for pat in self.patterns:
                if pat in message.text:
                    is_thankful_msg = True
                    break
        if is_thankful_msg is False:
            logging.debug("Filtered out")
            return
        if message.reply_to_message is None:
            logging.debug("No reply, skipping")
            return
        benefitiar_id = message.reply_to_message.from_user.id
        benefitiar_name = message.reply_to_message.from_user.full_name
        blesser_id = message.from_user.id
        blesser_name = message.from_user.full_name
        if benefitiar_id == blesser_id:
            await message.reply("–ü–æ–ª–∏—Ü–∏—è –∫–∞—Ä–º—ã –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ—Ç –≤–∞—Å –≤ –ø–æ–ø—ã—Ç–∫–µ –Ω–∞–∫—Ä—É—Ç–∫–∏üòé\n–ù–µ –Ω–∞–¥–æ —Ç–∞–∫.")
            return
        self.carma[benefitiar_id] += 1
        self.carma[blesser_id] += 0
        reply_template = f"{blesser_name} ({self.carma[blesser_id]})" \
                         f" —É–≤–µ–ª–∏—á–∏–ª –∫–∞—Ä–º—É {benefitiar_name} ({self.carma[benefitiar_id]})"
        if benefitiar_id == self.bot.id:
            reply_template += "\n–•–æ—Ä–æ—à–µ–µ —Å–ª–æ–≤–æ –∏ –±–æ—Ç—É –ø—Ä–∏—è—Ç–Ω–æ‚ù§"
        logging.info(message)
        await message.reply(reply_template)
